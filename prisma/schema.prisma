generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

enum BillingStatus {
  NONE
  ACTIVE
  PAST_DUE
  CANCELED
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum MembershipStatus {
  INVITED
  ACTIVE
  INACTIVE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  name                String?
  image               String?
  emailVerified       DateTime?
  defaultWorkspaceId  String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  accounts            Account[]
  sessions            Session[]
  memberships         WorkspaceMember[]
  invites             WorkspaceInvite[]   @relation("invite_creator")
  auditLogs           AuditLog[]          @relation("audit_actor")
  defaultWorkspace    Workspace?          @relation("default_users", fields: [defaultWorkspaceId], references: [id])
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id                          String              @id @default(cuid())
  name                        String
  slug                        String              @unique
  plan                        Plan                @default(FREE)
  billingStatus               BillingStatus       @default(NONE)
  stripeCustomerId            String?
  stripeSubscriptionId        String?
  billingPortalUrl            String?
  subscriptionStatusChangedAt DateTime?
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  memberships                 WorkspaceMember[]
  invites                     WorkspaceInvite[]
  auditLogs                   AuditLog[]          @relation("workspace_logs")
  defaultUsers                User[]              @relation("default_users")
}

model WorkspaceMember {
  id          String           @id @default(cuid())
  role        WorkspaceRole    @default(MEMBER)
  status      MembershipStatus @default(ACTIVE)
  userId      String
  workspaceId String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
}

model WorkspaceInvite {
  id          String           @id @default(cuid())
  email       String
  workspaceId String
  role        WorkspaceRole    @default(MEMBER)
  token       String           @unique
  status      InviteStatus     @default(PENDING)
  creatorId   String?
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime         @default(now())
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     User?            @relation("invite_creator", fields: [creatorId], references: [id])

  @@index([email, workspaceId])
}

model AuditLog {
  id          String    @id @default(cuid())
  workspaceId String?
  actorId     String?
  action      String
  target      String?
  ipAddress   String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  workspace   Workspace? @relation("workspace_logs", fields: [workspaceId], references: [id])
  actor       User?      @relation("audit_actor", fields: [actorId], references: [id])

  @@index([workspaceId])
  @@index([actorId])
}
